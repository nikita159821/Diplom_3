Index: tests/helpers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/helpers.py b/tests/helpers.py
new file mode 100644
--- /dev/null	
+++ b/tests/helpers.py	
@@ -0,0 +1,6 @@
+@allure.step('Генерация случайных данных для пользователя')
+def generate_user_data():
+    email = f"test-data-{random.randint(1, 10000)}@yandex.ru"
+    password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
+    name = f"TestUser{random.randint(1, 100)}"
+    return email, password, name
\ No newline at end of file
Index: pages/base_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import allure\r\nimport requests\r\nimport random\r\nimport string\r\nfrom selenium.common import TimeoutException\r\nfrom selenium.webdriver import ActionChains\r\nfrom selenium.webdriver.support.wait import WebDriverWait\r\nfrom locators.main_functionality_locator import order_feed_button, ingredient, buns, constructor_burger, \\\r\n    arrange_order_button, close_modal_order, constructor_button, modal_order\r\nfrom locators.order_feed_locator import completed_all_time\r\nfrom locators.personal_account_locators import button_personal_account, email_input, password_input, button_enter, \\\r\n    order_history_link\r\nfrom tests.url import URL\r\nfrom selenium.webdriver.support import expected_conditions as EC, expected_conditions\r\n\r\n\r\nclass BasePage:\r\n    def __init__(self, browser):\r\n        self.browser = browser\r\n        self.actions = ActionChains(self.browser)\r\n\r\n    @allure.step('Генерация случайных данных для пользователя')\r\n    def generate_user_data(self):\r\n        email = f\"test-data-{random.randint(1, 10000)}@yandex.ru\"\r\n        password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\r\n        name = f\"TestUser{random.randint(1, 100)}\"\r\n        return email, password, name\r\n\r\n    @allure.step('Создание пользователя')\r\n    def create_user(self):\r\n        email, password, name = self.generate_user_data()\r\n        url = \"https://stellarburgers.nomoreparties.site/api/auth/register\"\r\n        data = {\r\n            \"email\": email,\r\n            \"password\": password,\r\n            \"name\": name\r\n        }\r\n        response = requests.post(url, json=data)\r\n        response.raise_for_status()\r\n\r\n        access_token = response.json()['accessToken'].split(' ')[1]\r\n\r\n        return email, password, access_token\r\n\r\n    @allure.step('Удаление пользователя')\r\n    def delete_user(self, access_token):\r\n        url = \"https://stellarburgers.nomoreparties.site/api/auth/user\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {access_token}\"\r\n        }\r\n        response = requests.delete(url, headers=headers)\r\n        response.raise_for_status()\r\n\r\n    @allure.step('Открывает страницу с конструктором + выполняет авторизацию пользователя')\r\n    def login(self, email, password, access_token):\r\n        self.open()\r\n        self.click_personal_account()\r\n        self.send_keys_email_input(email)\r\n        self.send_keys_password_input(password)\r\n        self.click_button_enter()\r\n        return email, password, access_token\r\n\r\n    @allure.step('Общий метод для получения атрибута элемента')\r\n    def get_attribute_of_element(self, locator, attribute):\r\n        element = self.find(locator)\r\n        return element.get_attribute(attribute)\r\n\r\n    @allure.step('Кастомные условия ожидания')\r\n    def wait_for_element(self, locator):\r\n        try:\r\n            WebDriverWait(self.browser, 3).until(element_to_be(locator))\r\n        except TimeoutException:\r\n            return False\r\n        return True\r\n\r\n    @allure.step('Явное ожидание. Пока элемент не будет кликабелен')\r\n    def wait(self, locator):\r\n        WebDriverWait(self.browser, 10).until(expected_conditions.element_to_be_clickable(locator))\r\n        return self.browser.find_element(*locator)\r\n\r\n    @allure.step('Ждет загрузки страницы с указанным URL.')\r\n    def wait_for_page_load(self, url):\r\n        wait = WebDriverWait(self.browser, 10)\r\n        wait.until(EC.url_to_be(url))\r\n\r\n    @allure.step('Поиск элемента')\r\n    def find_element(self, *args):\r\n        return self.browser.find_element(*args)\r\n\r\n    @allure.step('Общий метод для поиска элемента')\r\n    def find(self, locator):\r\n        return self.find_element(*locator)\r\n\r\n    @allure.step('Поиск элементов')\r\n    def find_elements(self, *args):\r\n        return self.browser.find_elements(*args)\r\n\r\n    @allure.step('Общий метод для клика по элементу')\r\n    def click_element(self, locator):\r\n        element = self.find(locator)\r\n        element.click()\r\n\r\n    @allure.step('Общий метод для ввода данных')\r\n    def send_keys(self, locator, text):\r\n        element = self.find(locator)\r\n        element.send_keys(text)\r\n\r\n    @allure.step('Открывает главную страницу')\r\n    def open(self, url=None):\r\n        if url is not None:\r\n            self.browser.get(url)\r\n        else:\r\n            self.browser.get(URL)\r\n\r\n    @allure.step('Возвращаем текущую страницу')\r\n    def get_current_url(self):\r\n        return self.browser.current_url\r\n\r\n    @allure.step('Общий метод для получения текста элемента')\r\n    def get_text_of_element(self, locator):\r\n        element = self.find(locator)\r\n        return element.text\r\n\r\n    @allure.step('Нажимает на кнопку \"Конструктор\"')\r\n    def click_constructor_button(self):\r\n        self.click_element(constructor_button)\r\n\r\n    @allure.step('Создает бургер и оформляет заказ')\r\n    def create_burger_and_place_order(self):\r\n        ingredient = self.get_ingredient()\r\n        buns = self.get_buns()\r\n        burger_constructor = self.get_constructor_burger()\r\n        self.drag_and_drop_element(buns, burger_constructor)\r\n        self.drag_and_drop_element(ingredient, burger_constructor)\r\n        self.click_order_button()\r\n\r\n    def create_order_and_check_in_feed(self):\r\n        with allure.step('Нажимаем \"Конструктор\"'):\r\n            self.click_constructor_button()\r\n        with allure.step('Добавляем ожидание для загрузки страницы'):\r\n            self.wait_for_element(ingredient)\r\n        with allure.step('Собираем бургер и оформляем заказ'):\r\n            self.create_burger_and_place_order()\r\n        with allure.step('Добавляем ожидание для появления окна с заказом'):\r\n            self.wait_for_element(close_modal_order)\r\n        with allure.step('Закрываем окно с заказом'):\r\n            self.get_close_modal_order()\r\n        with allure.step('Открываем страницу \"Лента заказов\"'):\r\n            self.click_order_feed_button()\r\n        with allure.step('Добавляем ожидание для загрузки страницы'):\r\n            self.wait_for_element(completed_all_time)\r\n\r\n    @allure.step('Нажимает на кнопку \"Личный кабинет')\r\n    def click_personal_account(self):\r\n        self.click_element(button_personal_account)\r\n\r\n    @allure.step('Вводит почту в поле на странице авторизации')\r\n    def send_keys_email_input(self, email):\r\n        self.browser.find_element(*email_input).send_keys(email)\r\n\r\n    @allure.step('Вводит пароль в поле на странице авторизации')\r\n    def send_keys_password_input(self, password):\r\n        self.browser.find_element(*password_input).send_keys(password)\r\n\r\n    @allure.step('Нажатие на кнопку \"Войти\"')\r\n    def click_button_enter(self):\r\n        self.browser.find_element(*button_enter).click()\r\n\r\n    @allure.step('Нажимает на кнопку \"Лента заказов\"')\r\n    def click_order_feed_button(self):\r\n        self.click_element(order_feed_button)\r\n\r\n    @allure.step('Возвращает ингредиент')\r\n    def get_ingredient(self):\r\n        return self.find(ingredient)\r\n\r\n    @allure.step('Возвращает булку')\r\n    def get_buns(self):\r\n        return self.find(buns)\r\n\r\n    @allure.step('Возвращает конструктор бургера')\r\n    def get_constructor_burger(self):\r\n        return self.find(constructor_burger)\r\n\r\n    @allure.step('Перетаскивает элемент из одного места в другое')\r\n    def drag_and_drop_element(self, source, target):\r\n        self.actions.drag_and_drop(source, target).perform()\r\n\r\n    @allure.step('Нажимает \"Оформить заказ')\r\n    def click_order_button(self):\r\n        self.click_element(arrange_order_button)\r\n\r\n    @allure.step('Возвращает крестик для закрытия окна с заказом')\r\n    def get_close_modal_order(self):\r\n        self.click_element(close_modal_order)\r\n\r\n    @allure.step('Нажимает на кнопку \"История заказов\"')\r\n    def click_button_history(self):\r\n        self.click_element(order_history_link)\r\n\r\n    @allure.step('Возвращает номер заказа')\r\n    def get_modal_order_text(self):\r\n        return self.get_text_of_element(modal_order)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/base_page.py b/pages/base_page.py
--- a/pages/base_page.py	
+++ b/pages/base_page.py	
@@ -19,13 +19,6 @@
         self.browser = browser
         self.actions = ActionChains(self.browser)
 
-    @allure.step('Генерация случайных данных для пользователя')
-    def generate_user_data(self):
-        email = f"test-data-{random.randint(1, 10000)}@yandex.ru"
-        password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
-        name = f"TestUser{random.randint(1, 100)}"
-        return email, password, name
-
     @allure.step('Создание пользователя')
     def create_user(self):
         email, password, name = self.generate_user_data()
